protocol NavigationNode {
    var nodeId: String { get }

    func topNavigationItems() -> [Any]
    func navigationStackSize() -> Int
    mutating func popLastNavigationStackItem()
}

{% for type in types.implementing.NavigationStackItemState %}
{% if not type.implements.NavigationStackSourceState and not type.implements.NavigationStackItemStateConvertible and not type.name == "NavigationStackSourceState" %}
extension {{ type.name }}: NavigationNode {
    var nodeId: String { 
        navigationStackItemStateId
    }

    func topNavigationItems() -> [Any] {
        return [self]
    }

    func navigationStackSize() -> Int {
        return 1
    }

    mutating func popLastNavigationStackItem() {
        // no-op
    }
}
{% endif %}
{% endfor %}

{% for type in types.implementing.NavigationStackSourceState %}
{% for var in type.allVariables %}
{% if var.name == "presentedScreens" %}
{% set nextScreenType var.typeName.dictionary.valueType %}
{% if nextScreenType.kind == "enum" %}
extension {{ nextScreenType.name }}: NavigationNode {
    var nodeId: String {
        navigationNode.nodeId
    }

    private var navigationNode: NavigationNode {
        get {
            switch self {
{% for case in nextScreenType.cases %}
{% set caseValueType case.associatedValues[0].type %}
            case .{{ case.name}}(let s): return s
{% endfor %}
            }
        }

        set {
            switch newValue {
{% for case in nextScreenType.cases %}
{% set caseValueType case.associatedValues[0].type %}
            case let v as {{ caseValueType.name }}: self = .{{ case.name }}(v)
{% endfor %}
            default: break
            }
        }
    }

    func topNavigationItems() -> [Any] {
        return navigationNode.topNavigationItems()
    }

    func navigationStackSize() -> Int {
        return navigationNode.navigationStackSize()
    }

    mutating func popLastNavigationStackItem() {
        navigationNode.popLastNavigationStackItem()
    }
}
{% endif %}
{% endif %}
{% endfor %}

{% endfor %}

{% for type in types.implementing.NavigationStackSourceState %}
extension {{ type.name }}: NavigationNode {

    var nodeId: String { 
        navigationStackItemStateId
    }

    func topNavigationItems() -> [Any] {
        var result: [Any] = []
        if let next = presentedScreens[.nextInStack] {
            result.append(contentsOf: next.topNavigationItems())
        } else {
            result.append(self)
        }

        if let detail = presentedScreens[.detail] {
            result.append(contentsOf: detail.topNavigationItems())
        }
        return result
    }

    func navigationStackSize() -> Int {
        if let next = presentedScreens[.nextInStack] {
            return 1 + next.navigationStackSize()
        }
        return 1
    }

    mutating func popLastNavigationStackItem() {
        if navigationStackSize() <= 2 {
            presentedScreens[.nextInStack] = nil
        } else {
            presentedScreens[.nextInStack]?.popLastNavigationStackItem()
        }
    }

{% for var in type.allVariables %}
{% if var.name == "presentedScreens" %}
{% set nextScreenType var.typeName.dictionary.valueType %}
{% if nextScreenType.kind == "enum" %}
{% for case in nextScreenType.cases %}
    {% set caseValueType case.associatedValues[0].type %}
    var presentedNext{{ case.name|upperFirstLetter }}: {{ caseValueType.name }}? {
        get { 
            if case .{{ case.name }}(let s) = presentedScreens[.nextInStack] {
                return s
            }
            return nil
        }
        set { 
            if let value = newValue {
                presentedScreens[.nextInStack] = .{{ case.name }}(value) 
            }
        }
    }

    var presentedDetail{{ case.name|upperFirstLetter }}: {{ caseValueType.name }}? {
        get { 
            if case .{{ case.name }}(let s) = presentedScreens[.detail] {
                return s
            }
            return nil
        }
        set { 
            if let value = newValue {
                presentedScreens[.detail] = .{{ case.name }}(value) 
            }
        }
    }
{% endfor %}
{% endif %}
{% endif %}
{% endfor %}    
}
{% endfor %}
